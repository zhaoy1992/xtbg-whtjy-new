<?xml version="1.0" encoding="gb2312"?>

<poolman>
  <management-mode>local</management-mode>
  <datasource>
    <dbname>bspf</dbname>
    <loadmetadata>false</loadmetadata>
    <jndiName>bspf_datasource_jndiname</jndiName>
    <!-- 多数据源、多数据库默认处理类（无处理,不支持多数据源，不支持多数据库） -->
    <!--<interceptor>com.frameworkset.orm.adaptors.MyInterceptor</interceptor>-->
    <!-- 多数据源、多数据库处理类（支持多数据源，不支持多数据库） -->
    <!--<interceptor>com.chinacreator.epp.util.DataSourceInterceptor</interceptor>-->
    <!-- 多数据源、多数据库处理类（分别支持多数据源，支持多数据库） -->
    <interceptor>com.chinacreator.epp.util.SQLTransitionInterceptor</interceptor>
    <driver>oracle.jdbc.driver.OracleDriver</driver>
    <!-- 
    <url>jdbc:oracle:thin:@//172.16.17.115:1521/oa</url>
    <username>xtbg</username>
    <password>oatest</password> -->
     <url>jdbc:oracle:thin:@//172.16.17.185:1521/orcl</url>
    <username>whtjy_xtbg_hb_new</username>
    <password>123456</password>
    <!--<driver>COM.ibm.db2.jdbc.net.DB2Driver</driver>
		<url>jdbc:db2://172.16.17.125:6789/baseline</url>
		<username>db2admin</username>
		<password>123456</password>-->
    <!--<driver>com.mysql.jdbc.Driver</driver>
			<url>jdbc:mysql://172.16.17.90:3306/systemmanage?characterEncoding=utf-8</url>
			<username>root</username>
			<password>123456</password>-->
    <txIsolationLevel>READ_COMMITTED</txIsolationLevel>
    <nativeResults>true</nativeResults>
    <poolPreparedStatements>false</poolPreparedStatements>
    <initialConnections>2</initialConnections>
    <minimumSize>0</minimumSize>
    <maximumSize>10</maximumSize>
    <!--控制connection达到maximumSize是否允许再创建新的connection
			true：允许，缺省值
			false：不允许-->
    <maximumSoft>false</maximumSoft>
    <!--
			是否检测超时链接（事务超时链接）
			true-检测，如果检测到有事务超时的链接，系统将强制回收（释放）该链接
			false-不检测，默认值
		-->
    <removeAbandoned>true</removeAbandoned>
    <!--
			链接使用超时时间（事务超时时间）
			单位：秒
		-->
    <userTimeout>50</userTimeout>
    <!--
			系统强制回收链接时，是否输出后台日志
			true-输出，默认值
			false-不输出
		-->
    <logAbandoned>true</logAbandoned>
    <!--
			数据库会话是否是readonly，缺省为false
		-->
    <readOnly>false</readOnly>
    <!--
			对应属性：timeBetweenEvictionRunsMillis
			the amount of time (in milliseconds) to sleep between examining idle objects for eviction
		-->
    <skimmerFrequency>10</skimmerFrequency>
    <!--对应于minEvictableIdleTimeMillis 属性：
			minEvictableIdleTimeMillis the minimum number of milliseconds
			an object can sit idle in the pool before it is eligable for evcition
			单位：秒
			
			空闲链接回收时间，空闲时间超过指定的值时，将被回收
		-->
    <connectionTimeout>60</connectionTimeout>
    <!--
			numTestsPerEvictionRun
			the number of idle objects to
			examine per run within the idle object eviction thread (if any)
			
			每次回收的链接个数
		-->
    <shrinkBy>5</shrinkBy>
    <!--
			/**
			* 检测空闲链接处理时，是否对空闲链接进行有效性检查控制开关
			* true-检查，都检查到有无效链接时，直接销毁无效链接
			* false-不检查，缺省值
			*/
		-->
    <testWhileidle>true</testWhileidle>
    <!--
			定义数据库主键生成机制
			缺省的采用系统自带的主键生成机制，
			外步程序可以覆盖系统主键生成机制
			由值来决定
			auto:自动，一般在生产环境下采用该种模式，
			解决了单个应用并发访问数据库添加记录产生冲突的问题，效率高，如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
			composite：结合自动和实时从数据库中获取最大的主键值两种方式来处理，开发环境下建议采用该种模式，
			解决了多个应用同时访问数据库添加记录时产生冲突的问题，效率相对较低， 如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
		-->
    <keygenerate>composite</keygenerate>
    <!--poolman的日志信息输出改用log4j来输出到日志文件，相关的配置见log4j.properties文件-->
    <!--<logFile>dbaccess.log</logFile>
			<debugging>true</debugging>-->
    <!-- 请求链接时等待时间，单位：秒
			客服端程序请求链接等待时间超过指定值时，后台包等待超时异常
		-->
    <maxWait>60</maxWait>
    <!--
			链接有效性检查sql语句
		-->
    <!--<validationQuery>select 1 from dual</validationQuery>-->
    <autoprimarykey>false</autoprimarykey>
    <showsql>false</showsql>
  </datasource>
 
</poolman>
